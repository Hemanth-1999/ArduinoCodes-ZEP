									CLIMATE CONTROLL MASTER ESP8266

Function Name:  message_from_app


Function Return Type:
void

Function Arguments:
1. payload: Pointer to the array containing the message payload.
   - Type: byte pointer
   - Description: This parameter represents the pointer to an array containing the message payload received from the application.

2. length: Length of the payload array.
   - Type: unsigned int
   - Description: This parameter specifies the length of the payload array, indicating the number of elements in the array.

Description:
This function processes messages received from the application. It parses the incoming message payload, extracts relevant data such as temperature and manual fan control information, and determines whether to forward this data to the Mega board for further processing.

Local Variables:
1. index:
   - Type: byte
   - Description: A byte variable used as an index for iterating through the payload array during data extraction.

2. can_i_send_data_to_mega:
   - Type: byte
   - Description: This byte variable acts as a flag to indicate whether the extracted data should be sent to the Mega board for further processing. A value of 1 indicates that the data can be sent, while 0 indicates that no relevant data was found.

3. doc:
   - Type: DynamicJsonDocument
   - Description: A DynamicJsonDocument object used to parse the JSON data contained in the payload.

4. error:
   - Type: DeserializationError
   - Description: An object used to handle any errors that occur during the JSON deserialization process.

5. metrics:
   - Type: JsonObject
   - Description: JsonObject used to check for specific metrics, such as temperature or VPD (Vapor Pressure Deficit), within the JSON payload.

Steps:
1. Parse JSON Payload:
   - The function begins by creating a DynamicJsonDocument object named 'doc' with a pre-allocated buffer size of 512 bytes. It then attempts to deserialize the JSON payload using this document object.

2. Handle Deserialization Errors:
   - If an error occurs during JSON deserialization, the function prints an error message indicating the failure and exits the function.

3. Extract Relevant Data:
   - The function iterates through the payload array, extracting data element by element and storing it in the 'APP_DATA' array.

4. Check for Relevant Metrics:
   - It checks the parsed JSON document for specific metrics such as temperature ('temp') or Vapor Pressure Deficit ('vpd'). If either metric is found, the 'can_i_send_data_to_mega' flag is incremented.

5. Send Data to Mega:
   - If the 'can_i_send_data_to_mega' flag is set (indicating the presence of relevant data), the function sends the extracted data stored in the 'APP_DATA' array to the Mega board for further processing via the serial interface.




Function Name:
FileSystemInitialize

Function Return Type:
void

Description:
This function initializes the SPIFFS (SPI Flash File System) file system. It attempts to mount the SPIFFS file system, and if successful, it proceeds with the execution. If the mount operation fails, the function prints an error message indicating the failure to mount the file system. It also outputs a warning message informing the user that the program will not function properly until it is connected to the file system. The function continues to attempt to mount the file system in a loop until successful.

Steps:
1. Attempt SPIFFS Mount:
   - The function enters a while loop that continues until the SPIFFS file system is successfully mounted.
   - Within the loop, it calls the SPIFFS.begin() function to attempt to mount the SPIFFS file system.

2. Handle Mount Failure:
   - If the mount operation fails (SPIFFS.begin() returns false), the function prints an error message indicating the failure to mount the SPIFFS file system.

3. Output Warning Message:
   - Additionally, it prints a warning message indicating that the program will not function properly until it is connected to the file system.

4. Retry Mounting:
   - The function introduces a delay of 1000 milliseconds (1 second) using the delay() function before attempting to mount the file system again.
   - The loop continues until SPIFFS.begin() returns true, indicating a successful mount operation.

//*******************************************************************************END********************************************************************************************************





Function Name:
readsavedvalues

Function Return Type:
void

Description:
This function reads saved configuration values from a JSON file named "params.json" stored in the SPIFFS (SPI Flash File System). It retrieves MQTT (Message Queuing Telemetry Transport) connection credentials and other parameters from the JSON file and populates the corresponding fields in the 'mqttcredentials' structure. Additionally, it sets a flag 'read_from_file_status' to indicate successful execution of the function.

Local Variables:
1. file:
   - Type: File
   - Description: File object used to open the "params.json" file for reading from SPIFFS.

2. doc:
   - Type: DynamicJsonDocument
   - Description: DynamicJsonDocument object used to parse the JSON data retrieved from the file.

3. error:
   - Type: DeserializationError
   - Description: DeserializationError object used to handle errors that occur during JSON parsing.

Steps:
1. Set Flag:
   - Set the 'read_from_file_status' flag to true to indicate that the function is reading saved values from the file.

2. Open File:
   - Attempt to open the "params.json" file for reading using the SPIFFS.open() function. If the file cannot be opened, print an error message and return from the function.

3. Parse JSON Data:
   - Create a DynamicJsonDocument object named 'doc' with a buffer size of 1024 bytes.
   - Deserialize the JSON data read from the file into the 'doc' object. If there is an error during JSON parsing, print an error message and return from the function.

4. Extract Values:
   - Retrieve MQTT connection credentials and other parameters from the 'doc' object and copy them into the corresponding fields of the 'mqttcredentials' structure.

5. Close File:
   - Close the file after reading the data to release system resources.

6. Print Values (Debug):
   - Print the retrieved values to the serial monitor for debugging purposes, including the MQTT connection credentials and other parameters.

//*****************************************************************************END*****************************************************************************************************


Function Name:
message_from_inside_node

Function Return Type:
void

Function Arguments:
1. payload: Pointer to the array containing the message payload.
   - Type: byte pointer
   - Description: Pointer to the array containing the message payload received from inside the node.

2. length: Length of the payload array.
   - Type: unsigned int
   - Description: Length of the payload array indicating the number of elements in the array.

Description:
This function processes messages received from inside the node. It parses the JSON payload to extract various metrics such as temperature, humidity, vapor pressure deficit (VPD), heat index, CO2 levels, environmental temperature, pressure, UV intensity, dew point, and sea level pressure. It then adds these values to the corresponding ring buffers for calculating running averages. Finally, it calculates the average values from the ring buffers and assigns them to global variables for further processing.

Local Variables:
1. doc:
   - Type: DynamicJsonDocument
   - Description: DynamicJsonDocument object used to parse the JSON data retrieved from the payload.

2. error:
   - Type: DeserializationError
   - Description: DeserializationError object used to handle errors that occur during JSON parsing.

Steps:
1. Parse JSON Payload:
   - Create a DynamicJsonDocument object named 'doc' with a buffer size of 512 bytes.
   - Deserialize the JSON payload using deserializeJson() function. If there is an error during JSON parsing, print an error message and return from the function.

2. Extract Metrics:
   - Extract various metrics such as temperature, humidity, VPD, heat index, CO2 levels, environmental temperature, pressure, UV intensity, dew point, and sea level pressure from the parsed JSON data.

3. Add Values to Ring Buffers:
   - Add the extracted values to the corresponding ring buffers (RAT, RAH, RAHI, RAVPD, RACO2, RAET, RABP, RASOL, RADEW, RAUV) for calculating running averages.

4. Calculate Average Values:
   - Calculate the average values from the ring buffers and assign them to the corresponding global variables (_AT, _HUM, _HI, _VPD, _CO2, _ET, _BP, _SL, _DP, _UV) for further processing.







Function Name:
manualstatus

Function Return Type:
void

Description:
This function reads manual status information from a JSON object received via the Serial interface. It deserializes the JSON data and extracts the manual status of various components or functions. The extracted manual status values are assigned to corresponding global variables for further processing.

Local Variables:
1. relaystatus:
   - Type: DynamicJsonDocument
   - Description: DynamicJsonDocument object used to store the JSON data received via Serial.

2. error:
   - Type: DeserializationError
   - Description: DeserializationError object used to handle errors that occur during JSON parsing.

3. Manualstatus:
   - Type: JsonObject
   - Description: JsonObject containing manual status information extracted from the relaystatus DynamicJsonDocument.

Steps:
1. Deserialize JSON Data:
   - Create a DynamicJsonDocument object named 'relaystatus' with a buffer size of 500 bytes.
   - Deserialize the JSON data received via Serial using the deserializeJson() function. If there is an error during JSON parsing, print an error message and return from the function.

2. Extract Manual Status:
   - Extract manual status information for various components or functions (e.g., f1, f2, ..., pb) from the JsonObject 'Manualstatus'.
   - Assign the extracted manual status values to corresponding global variables (e.g., Manualstatus_f1, Manualstatus_f2, ..., Manualstatus_pb) for further processing.









Function Name:
callback

Function Return Type:
void

Function Arguments:
1. topic: Pointer to a character array representing the topic of the MQTT message.
   - Type: char pointer
   - Description: This parameter holds the topic of the MQTT message.

2. payload: Pointer to the array containing the message payload.
   - Type: byte pointer
   - Description: This parameter points to the array containing the message payload received via MQTT.

3. length: Length of the payload array.
   - Type: unsigned int
   - Description: Length of the payload array indicating the number of elements in the array.

Description:
This function serves as the callback for incoming MQTT messages. It receives the topic, payload, and length of the message and processes it accordingly. Depending on the topic, it dispatches the message payload to different handler functions for further processing.

Local Variables:
1. None

Steps:
1. Print Message Arrival:
   - Print a message indicating that a message has arrived, along with the topic of the message.

2. Check Topic:
   - Check the topic of the incoming message using string comparison functions.

3. Route Message Payload:
   - If the topic matches the sendtopic_ESMesh, call the message_from_outside_node function to handle the payload.
   - If the topic matches the sendtopic_WSMesh, call the message_from_inside_node function to handle the payload.
   - If the topic matches the sendtopic_app, call the message_from_app function to handle the payload.
   - If the topic does not match any predefined topics, print the payload directly to the serial monitor.








